#!/usr/bin/env python3

import json
import locale
import sys
import collections
import reports
import os
import emails

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
  """Analyzes the data, looking for maximums.
  Returns a list of lines that summarize the information.
  """

  max_sales = {"total_sales":0}
  max_revenue = {"revenue": 0}

  # we use this type of dictionary creation so that we dont need to say already what keys we have.
  #it will simply add the ones that it doesnt recognise.
  car_year_sales = collections.defaultdict(int)

  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    # locale.atof(string) - Converts a string to a floating point number, following the LC_NUMERIC settings.
    # .strip() - Remove the "$" sign
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    # if the item revenue is larger that a max_revenue from a standalone dictionary that we created is then we attach a new revenue
    # to the item dictionary and link the item_revenue to it. Then we make max_revenue = item which makes it a dictionary that we can use later on
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
 # TODO: also handle max sales
    if item["total_sales"] > max_sales["total_sales"]:
     max_sales = item
    # TODO: also handle most popular car_year
    # this dictionary will include each one of the years to which we have data for and then add up the item[total_sales]
    #It's print is: "defaultdict(<class 'int'>,
    #{1997: 5693, 2005: 14568, 2009: 16745, 2006: 14726, 1969: 691.."

    car_year_sales[item["car"]["car_year"]] += item["total_sales"]
  max_car_sales_tuple = (0,0)
  for year, sales in car_year_sales.items():
   if sales > max_car_sales_tuple[1]:
    max_car_sales_tuple = (year,sales)
  summary = []
  summary.append("The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]))
  summary.append("The {} had the most sales: {}".format(
      format_car(max_sales["car"]), max_sales["total_sales"]))
  summary.append("The most popular year was {} with {} sales.".format(
      max_car_sales_tuple[0], max_car_sales_tuple[1]))

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
      table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)

  # Generate a paragraph that contains the necessary summary
  paragraph = "<br/>".join(summary)

  # Generate a table that contains the list of cars
  table_data = cars_dict_to_table(data)

  # Generate the PDF report
  title = "Sales summary for last month"
  attachment = "/tmp/cars.pdf"
  reports.generate(attachment, title, paragraph, table_data)

  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  body = "\n".join(summary)
  message = emails.generate(sender, receiver, title, body, attachment)
  emails.send(message)

if __name__ == "__main__":
  main(sys.argv)
